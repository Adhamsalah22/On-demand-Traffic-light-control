
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000672  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800070  00800070  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fc6  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000911  00000000  00000000  0000188a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000afc  00000000  00000000  0000219b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00002c98  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  00002f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cd6  00000000  00000000  000034df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000041b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 06 03 	jmp	0x60c	; 0x60c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 32 01 	call	0x264	; 0x264 <main>
  8a:	0c 94 37 03 	jmp	0x66e	; 0x66e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <pedestrian_mode>:
}


void pedestrian_mode(void){
	
	if (current_light == 0)
  92:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
  96:	81 11       	cpse	r24, r1
  98:	07 c0       	rjmp	.+14     	; 0xa8 <pedestrian_mode+0x16>
	{
		current_light = 1;
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <current_light>
		last_light = 0;
  a0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <last_light>
		counter = 0;
  a4:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
  a8:	08 95       	ret

000000aa <change_turn>:
	
}

void change_turn (void){
	
	if (counter == 5)
  aa:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
  ae:	85 30       	cpi	r24, 0x05	; 5
  b0:	51 f4       	brne	.+20     	; 0xc6 <change_turn+0x1c>
	{
		last_light = current_light;
  b2:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
  b6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <last_light>
		current_light ++;
  ba:	8f 5f       	subi	r24, 0xFF	; 255
		current_light %= 4;
  bc:	83 70       	andi	r24, 0x03	; 3
  be:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <current_light>

		counter = 0;
  c2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__data_end>
  c6:	08 95       	ret

000000c8 <initialize_leds>:
	
}



APP_ERROR_t initialize_leds (void){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	
	for (int i=0 ; i < 4 ; i++)
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <initialize_leds+0x30>
	{
		if (( LED_init_t(&cars_traffic_lights [i]) != LED_OK ) || ( LED_init_t(&pedestrian_traffic_lights[i]) != LED_OK )) {
  d2:	ce 01       	movw	r24, r28
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	88 59       	subi	r24, 0x98	; 152
  da:	9f 4f       	sbci	r25, 0xFF	; 255
  dc:	0e 94 03 01 	call	0x206	; 0x206 <LED_init_t>
  e0:	81 11       	cpse	r24, r1
  e2:	0f c0       	rjmp	.+30     	; 0x102 <initialize_leds+0x3a>
  e4:	ce 01       	movw	r24, r28
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	80 5a       	subi	r24, 0xA0	; 160
  ec:	9f 4f       	sbci	r25, 0xFF	; 255
  ee:	0e 94 03 01 	call	0x206	; 0x206 <LED_init_t>
  f2:	81 11       	cpse	r24, r1
  f4:	08 c0       	rjmp	.+16     	; 0x106 <initialize_leds+0x3e>



APP_ERROR_t initialize_leds (void){
	
	for (int i=0 ; i < 4 ; i++)
  f6:	21 96       	adiw	r28, 0x01	; 1
  f8:	c4 30       	cpi	r28, 0x04	; 4
  fa:	d1 05       	cpc	r29, r1
  fc:	54 f3       	brlt	.-44     	; 0xd2 <initialize_leds+0xa>
		if (( LED_init_t(&cars_traffic_lights [i]) != LED_OK ) || ( LED_init_t(&pedestrian_traffic_lights[i]) != LED_OK )) {
			return APP_FAILED ;
		}
	}
	
	return APP_OK;
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	03 c0       	rjmp	.+6      	; 0x108 <initialize_leds+0x40>
APP_ERROR_t initialize_leds (void){
	
	for (int i=0 ; i < 4 ; i++)
	{
		if (( LED_init_t(&cars_traffic_lights [i]) != LED_OK ) || ( LED_init_t(&pedestrian_traffic_lights[i]) != LED_OK )) {
			return APP_FAILED ;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	01 c0       	rjmp	.+2      	; 0x108 <initialize_leds+0x40>
 106:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return APP_OK;
}
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <turn_all_leds_off>:

APP_ERROR_t turn_all_leds_off(void){
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
	
	for (int i=0 ; i < 4 ; i++){
 112:	c0 e0       	ldi	r28, 0x00	; 0
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	13 c0       	rjmp	.+38     	; 0x13e <turn_all_leds_off+0x30>
		
		if (( LED_off_t(&cars_traffic_lights [i]) != LED_OK ) || ( LED_off_t(&pedestrian_traffic_lights[i]) != LED_OK )){
 118:	ce 01       	movw	r24, r28
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	88 59       	subi	r24, 0x98	; 152
 120:	9f 4f       	sbci	r25, 0xFF	; 255
 122:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off_t>
 126:	81 11       	cpse	r24, r1
 128:	0f c0       	rjmp	.+30     	; 0x148 <turn_all_leds_off+0x3a>
 12a:	ce 01       	movw	r24, r28
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	80 5a       	subi	r24, 0xA0	; 160
 132:	9f 4f       	sbci	r25, 0xFF	; 255
 134:	0e 94 1b 01 	call	0x236	; 0x236 <LED_off_t>
 138:	81 11       	cpse	r24, r1
 13a:	08 c0       	rjmp	.+16     	; 0x14c <turn_all_leds_off+0x3e>
	return APP_OK;
}

APP_ERROR_t turn_all_leds_off(void){
	
	for (int i=0 ; i < 4 ; i++){
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	c4 30       	cpi	r28, 0x04	; 4
 140:	d1 05       	cpc	r29, r1
 142:	54 f3       	brlt	.-44     	; 0x118 <turn_all_leds_off+0xa>
		if (( LED_off_t(&cars_traffic_lights [i]) != LED_OK ) || ( LED_off_t(&pedestrian_traffic_lights[i]) != LED_OK )){
			return APP_FAILED;
		}
	}
	
	return APP_OK;
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	03 c0       	rjmp	.+6      	; 0x14e <turn_all_leds_off+0x40>
APP_ERROR_t turn_all_leds_off(void){
	
	for (int i=0 ; i < 4 ; i++){
		
		if (( LED_off_t(&cars_traffic_lights [i]) != LED_OK ) || ( LED_off_t(&pedestrian_traffic_lights[i]) != LED_OK )){
			return APP_FAILED;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	01 c0       	rjmp	.+2      	; 0x14e <turn_all_leds_off+0x40>
 14c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	
	return APP_OK;
}
 14e:	df 91       	pop	r29
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <traffic_orgnization>:

void traffic_orgnization (void) {
	

	
	if (current_light ==1 || current_light ==3 )
 154:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	11 f0       	breq	.+4      	; 0x160 <traffic_orgnization+0xc>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	19 f5       	brne	.+70     	; 0x1a6 <traffic_orgnization+0x52>
	{
		
		LED_toggle_t(&cars_traffic_lights [ current_light ]);
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	88 59       	subi	r24, 0x98	; 152
 168:	9f 4f       	sbci	r25, 0xFF	; 255
 16a:	0e 94 27 01 	call	0x24e	; 0x24e <LED_toggle_t>
		LED_on_t(&cars_traffic_lights[last_light]);
 16e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <last_light>
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	88 59       	subi	r24, 0x98	; 152
 17a:	9f 4f       	sbci	r25, 0xFF	; 255
 17c:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on_t>
		
		LED_toggle_t(&pedestrian_traffic_lights [ current_light ]);
 180:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	80 5a       	subi	r24, 0xA0	; 160
 18c:	9f 4f       	sbci	r25, 0xFF	; 255
 18e:	0e 94 27 01 	call	0x24e	; 0x24e <LED_toggle_t>
		LED_on_t(&pedestrian_traffic_lights[last_light]);
 192:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <last_light>
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	80 5a       	subi	r24, 0xA0	; 160
 19e:	9f 4f       	sbci	r25, 0xFF	; 255
 1a0:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on_t>
 1a4:	14 c0       	rjmp	.+40     	; 0x1ce <traffic_orgnization+0x7a>
	}
	else {
		turn_all_leds_off();
 1a6:	0e 94 87 00 	call	0x10e	; 0x10e <turn_all_leds_off>
		LED_on_t(&cars_traffic_lights [ current_light ]);
 1aa:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	88 59       	subi	r24, 0x98	; 152
 1b6:	9f 4f       	sbci	r25, 0xFF	; 255
 1b8:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on_t>
		LED_on_t(&pedestrian_traffic_lights [ current_light ]);
 1bc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <current_light>
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	80 5a       	subi	r24, 0xA0	; 160
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	0e 94 0f 01 	call	0x21e	; 0x21e <LED_on_t>
	}
	
	
	counter ++;
 1ce:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 1d2:	8f 5f       	subi	r24, 0xFF	; 255
 1d4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__data_end>
 1d8:	08 95       	ret

000001da <app_Start>:



void app_Start (void){
	
	if ( initialize_leds() != APP_OK ) { return; }
 1da:	0e 94 64 00 	call	0xc8	; 0xc8 <initialize_leds>
 1de:	81 11       	cpse	r24, r1
 1e0:	11 c0       	rjmp	.+34     	; 0x204 <app_Start+0x2a>

	TIMER_FUNC_CALL(traffic_orgnization);
 1e2:	8a ea       	ldi	r24, 0xAA	; 170
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 01 03 	call	0x602	; 0x602 <TIMER_FUNC_CALL>
	INT0_FUNC_CALL(pedestrian_mode);
 1ea:	89 e4       	ldi	r24, 0x49	; 73
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 ce 02 	call	0x59c	; 0x59c <INT0_FUNC_CALL>
	
	enable_external_INT0();
 1f2:	0e 94 c1 02 	call	0x582	; 0x582 <enable_external_INT0>
	TIMER0_init();
 1f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <TIMER0_init>
	
	traffic_orgnization();
 1fa:	0e 94 aa 00 	call	0x154	; 0x154 <traffic_orgnization>
	
	while(1){
		change_turn();
 1fe:	0e 94 55 00 	call	0xaa	; 0xaa <change_turn>
 202:	fd cf       	rjmp	.-6      	; 0x1fe <app_Start+0x24>
 204:	08 95       	ret

00000206 <LED_init_t>:
}

/************************* same functions as above but for structs *******************************/

LED_ERROR_t LED_init_t(LED* led){
	if (DIO_init(led->ledPin , led->ledPort , OUT) != DIO_OK ){
 206:	41 e0       	ldi	r20, 0x01	; 1
 208:	fc 01       	movw	r30, r24
 20a:	61 81       	ldd	r22, Z+1	; 0x01
 20c:	80 81       	ld	r24, Z
 20e:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_init>
 212:	88 23       	and	r24, r24
 214:	11 f0       	breq	.+4      	; 0x21a <LED_init_t+0x14>
		return LED_FAILED;
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	08 95       	ret
	}
	
	return LED_OK;
 21a:	80 e0       	ldi	r24, 0x00	; 0
}
 21c:	08 95       	ret

0000021e <LED_on_t>:


LED_ERROR_t LED_on_t (LED* led){
	if (DIO_write(led->ledPin , led->ledPort , HIGH) != DIO_OK ){
 21e:	41 e0       	ldi	r20, 0x01	; 1
 220:	fc 01       	movw	r30, r24
 222:	61 81       	ldd	r22, Z+1	; 0x01
 224:	80 81       	ld	r24, Z
 226:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_write>
 22a:	88 23       	and	r24, r24
 22c:	11 f0       	breq	.+4      	; 0x232 <LED_on_t+0x14>
		return LED_FAILED;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret
	}
	
	return LED_OK;
 232:	80 e0       	ldi	r24, 0x00	; 0
}
 234:	08 95       	ret

00000236 <LED_off_t>:


LED_ERROR_t LED_off_t (LED* led){
	if (DIO_write(led->ledPin , led->ledPort , LOW) != DIO_OK ){
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	fc 01       	movw	r30, r24
 23a:	61 81       	ldd	r22, Z+1	; 0x01
 23c:	80 81       	ld	r24, Z
 23e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <DIO_write>
 242:	88 23       	and	r24, r24
 244:	11 f0       	breq	.+4      	; 0x24a <LED_off_t+0x14>
		return LED_FAILED;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	08 95       	ret
	}
	
	return LED_OK;
 24a:	80 e0       	ldi	r24, 0x00	; 0
}
 24c:	08 95       	ret

0000024e <LED_toggle_t>:


LED_ERROR_t LED_toggle_t (LED* led){
	if (DIO_toggle(led->ledPin , led->ledPort) != DIO_OK ){
 24e:	fc 01       	movw	r30, r24
 250:	61 81       	ldd	r22, Z+1	; 0x01
 252:	80 81       	ld	r24, Z
 254:	0e 94 77 02 	call	0x4ee	; 0x4ee <DIO_toggle>
 258:	88 23       	and	r24, r24
 25a:	11 f0       	breq	.+4      	; 0x260 <LED_toggle_t+0x12>
		return LED_FAILED;
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	08 95       	ret
	}
	
	return LED_OK;
 260:	80 e0       	ldi	r24, 0x00	; 0
}
 262:	08 95       	ret

00000264 <main>:
#include <avr/io.h>
#include "Application/app.h"

int main(void)
{
	app_Start();
 264:	0e 94 ed 00 	call	0x1da	; 0x1da <app_Start>
}
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	08 95       	ret

0000026e <DIO_init>:
		default:
		return DIO_WRONG_PORT;
	}
	
	return DIO_OK;
}
 26e:	88 30       	cpi	r24, 0x08	; 8
 270:	08 f0       	brcs	.+2      	; 0x274 <DIO_init+0x6>
 272:	91 c0       	rjmp	.+290    	; 0x396 <DIO_init+0x128>
 274:	62 34       	cpi	r22, 0x42	; 66
 276:	61 f1       	breq	.+88     	; 0x2d0 <DIO_init+0x62>
 278:	18 f4       	brcc	.+6      	; 0x280 <DIO_init+0x12>
 27a:	61 34       	cpi	r22, 0x41	; 65
 27c:	41 f0       	breq	.+16     	; 0x28e <DIO_init+0x20>
 27e:	8d c0       	rjmp	.+282    	; 0x39a <DIO_init+0x12c>
 280:	63 34       	cpi	r22, 0x43	; 67
 282:	09 f4       	brne	.+2      	; 0x286 <DIO_init+0x18>
 284:	46 c0       	rjmp	.+140    	; 0x312 <DIO_init+0xa4>
 286:	64 34       	cpi	r22, 0x44	; 68
 288:	09 f4       	brne	.+2      	; 0x28c <DIO_init+0x1e>
 28a:	64 c0       	rjmp	.+200    	; 0x354 <DIO_init+0xe6>
 28c:	86 c0       	rjmp	.+268    	; 0x39a <DIO_init+0x12c>
 28e:	41 30       	cpi	r20, 0x01	; 1
 290:	71 f4       	brne	.+28     	; 0x2ae <DIO_init+0x40>
 292:	4a b3       	in	r20, 0x1a	; 26
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	b9 01       	movw	r22, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_init+0x32>
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	8a 95       	dec	r24
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_init+0x2e>
 2a4:	cb 01       	movw	r24, r22
 2a6:	84 2b       	or	r24, r20
 2a8:	8a bb       	out	0x1a, r24	; 26
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret
 2ae:	41 11       	cpse	r20, r1
 2b0:	76 c0       	rjmp	.+236    	; 0x39e <DIO_init+0x130>
 2b2:	4a b3       	in	r20, 0x1a	; 26
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	b9 01       	movw	r22, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_init+0x52>
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	8a 95       	dec	r24
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_init+0x4e>
 2c4:	cb 01       	movw	r24, r22
 2c6:	80 95       	com	r24
 2c8:	84 23       	and	r24, r20
 2ca:	8a bb       	out	0x1a, r24	; 26
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	08 95       	ret
 2d0:	41 30       	cpi	r20, 0x01	; 1
 2d2:	71 f4       	brne	.+28     	; 0x2f0 <DIO_init+0x82>
 2d4:	47 b3       	in	r20, 0x17	; 23
 2d6:	21 e0       	ldi	r18, 0x01	; 1
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	b9 01       	movw	r22, r18
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <DIO_init+0x74>
 2de:	66 0f       	add	r22, r22
 2e0:	77 1f       	adc	r23, r23
 2e2:	8a 95       	dec	r24
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <DIO_init+0x70>
 2e6:	cb 01       	movw	r24, r22
 2e8:	84 2b       	or	r24, r20
 2ea:	87 bb       	out	0x17, r24	; 23
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
 2f0:	41 11       	cpse	r20, r1
 2f2:	57 c0       	rjmp	.+174    	; 0x3a2 <DIO_init+0x134>
 2f4:	47 b3       	in	r20, 0x17	; 23
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_init+0x94>
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	8a 95       	dec	r24
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_init+0x90>
 306:	cb 01       	movw	r24, r22
 308:	80 95       	com	r24
 30a:	84 23       	and	r24, r20
 30c:	87 bb       	out	0x17, r24	; 23
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret
 312:	41 30       	cpi	r20, 0x01	; 1
 314:	71 f4       	brne	.+28     	; 0x332 <DIO_init+0xc4>
 316:	44 b3       	in	r20, 0x14	; 20
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	b9 01       	movw	r22, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_init+0xb6>
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	8a 95       	dec	r24
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_init+0xb2>
 328:	cb 01       	movw	r24, r22
 32a:	84 2b       	or	r24, r20
 32c:	84 bb       	out	0x14, r24	; 20
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	08 95       	ret
 332:	41 11       	cpse	r20, r1
 334:	38 c0       	rjmp	.+112    	; 0x3a6 <DIO_init+0x138>
 336:	44 b3       	in	r20, 0x14	; 20
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_init+0xd6>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_init+0xd2>
 348:	cb 01       	movw	r24, r22
 34a:	80 95       	com	r24
 34c:	84 23       	and	r24, r20
 34e:	84 bb       	out	0x14, r24	; 20
 350:	80 e0       	ldi	r24, 0x00	; 0
 352:	08 95       	ret
 354:	41 30       	cpi	r20, 0x01	; 1
 356:	71 f4       	brne	.+28     	; 0x374 <DIO_init+0x106>
 358:	41 b3       	in	r20, 0x11	; 17
 35a:	21 e0       	ldi	r18, 0x01	; 1
 35c:	30 e0       	ldi	r19, 0x00	; 0
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_init+0xf8>
 362:	66 0f       	add	r22, r22
 364:	77 1f       	adc	r23, r23
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_init+0xf4>
 36a:	cb 01       	movw	r24, r22
 36c:	84 2b       	or	r24, r20
 36e:	81 bb       	out	0x11, r24	; 17
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret
 374:	41 11       	cpse	r20, r1
 376:	19 c0       	rjmp	.+50     	; 0x3aa <DIO_init+0x13c>
 378:	41 b3       	in	r20, 0x11	; 17
 37a:	21 e0       	ldi	r18, 0x01	; 1
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	b9 01       	movw	r22, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_init+0x118>
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	8a 95       	dec	r24
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_init+0x114>
 38a:	cb 01       	movw	r24, r22
 38c:	80 95       	com	r24
 38e:	84 23       	and	r24, r20
 390:	81 bb       	out	0x11, r24	; 17
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	08 95       	ret
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	08 95       	ret
 39a:	82 e0       	ldi	r24, 0x02	; 2
 39c:	08 95       	ret
 39e:	83 e0       	ldi	r24, 0x03	; 3
 3a0:	08 95       	ret
 3a2:	83 e0       	ldi	r24, 0x03	; 3
 3a4:	08 95       	ret
 3a6:	83 e0       	ldi	r24, 0x03	; 3
 3a8:	08 95       	ret
 3aa:	83 e0       	ldi	r24, 0x03	; 3
 3ac:	08 95       	ret

000003ae <DIO_write>:
 3ae:	88 30       	cpi	r24, 0x08	; 8
 3b0:	08 f0       	brcs	.+2      	; 0x3b4 <DIO_write+0x6>
 3b2:	91 c0       	rjmp	.+290    	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 3b4:	62 34       	cpi	r22, 0x42	; 66
 3b6:	61 f1       	breq	.+88     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3b8:	18 f4       	brcc	.+6      	; 0x3c0 <DIO_write+0x12>
 3ba:	61 34       	cpi	r22, 0x41	; 65
 3bc:	41 f0       	breq	.+16     	; 0x3ce <DIO_write+0x20>
 3be:	8d c0       	rjmp	.+282    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 3c0:	63 34       	cpi	r22, 0x43	; 67
 3c2:	09 f4       	brne	.+2      	; 0x3c6 <DIO_write+0x18>
 3c4:	46 c0       	rjmp	.+140    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 3c6:	64 34       	cpi	r22, 0x44	; 68
 3c8:	09 f4       	brne	.+2      	; 0x3cc <DIO_write+0x1e>
 3ca:	64 c0       	rjmp	.+200    	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 3cc:	86 c0       	rjmp	.+268    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 3ce:	41 30       	cpi	r20, 0x01	; 1
 3d0:	71 f4       	brne	.+28     	; 0x3ee <DIO_write+0x40>
 3d2:	4b b3       	in	r20, 0x1b	; 27
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	b9 01       	movw	r22, r18
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_write+0x32>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	8a 95       	dec	r24
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_write+0x2e>
 3e4:	cb 01       	movw	r24, r22
 3e6:	84 2b       	or	r24, r20
 3e8:	8b bb       	out	0x1b, r24	; 27
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	08 95       	ret
 3ee:	41 11       	cpse	r20, r1
 3f0:	76 c0       	rjmp	.+236    	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 3f2:	4b b3       	in	r20, 0x1b	; 27
 3f4:	21 e0       	ldi	r18, 0x01	; 1
 3f6:	30 e0       	ldi	r19, 0x00	; 0
 3f8:	b9 01       	movw	r22, r18
 3fa:	02 c0       	rjmp	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	66 0f       	add	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	8a 95       	dec	r24
 402:	e2 f7       	brpl	.-8      	; 0x3fc <DIO_write+0x4e>
 404:	cb 01       	movw	r24, r22
 406:	80 95       	com	r24
 408:	84 23       	and	r24, r20
 40a:	8b bb       	out	0x1b, r24	; 27
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	08 95       	ret
 410:	41 30       	cpi	r20, 0x01	; 1
 412:	71 f4       	brne	.+28     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 414:	48 b3       	in	r20, 0x18	; 24
 416:	21 e0       	ldi	r18, 0x01	; 1
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	b9 01       	movw	r22, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	8a 95       	dec	r24
 424:	e2 f7       	brpl	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	cb 01       	movw	r24, r22
 428:	84 2b       	or	r24, r20
 42a:	88 bb       	out	0x18, r24	; 24
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret
 430:	41 11       	cpse	r20, r1
 432:	57 c0       	rjmp	.+174    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 434:	48 b3       	in	r20, 0x18	; 24
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	cb 01       	movw	r24, r22
 448:	80 95       	com	r24
 44a:	84 23       	and	r24, r20
 44c:	88 bb       	out	0x18, r24	; 24
 44e:	80 e0       	ldi	r24, 0x00	; 0
 450:	08 95       	ret
 452:	41 30       	cpi	r20, 0x01	; 1
 454:	71 f4       	brne	.+28     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 456:	45 b3       	in	r20, 0x15	; 21
 458:	21 e0       	ldi	r18, 0x01	; 1
 45a:	30 e0       	ldi	r19, 0x00	; 0
 45c:	b9 01       	movw	r22, r18
 45e:	02 c0       	rjmp	.+4      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 460:	66 0f       	add	r22, r22
 462:	77 1f       	adc	r23, r23
 464:	8a 95       	dec	r24
 466:	e2 f7       	brpl	.-8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 468:	cb 01       	movw	r24, r22
 46a:	84 2b       	or	r24, r20
 46c:	85 bb       	out	0x15, r24	; 21
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	08 95       	ret
 472:	41 11       	cpse	r20, r1
 474:	38 c0       	rjmp	.+112    	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
 476:	45 b3       	in	r20, 0x15	; 21
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	b9 01       	movw	r22, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	8a 95       	dec	r24
 486:	e2 f7       	brpl	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 488:	cb 01       	movw	r24, r22
 48a:	80 95       	com	r24
 48c:	84 23       	and	r24, r20
 48e:	85 bb       	out	0x15, r24	; 21
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	08 95       	ret
 494:	41 30       	cpi	r20, 0x01	; 1
 496:	71 f4       	brne	.+28     	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 498:	42 b3       	in	r20, 0x12	; 18
 49a:	21 e0       	ldi	r18, 0x01	; 1
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	b9 01       	movw	r22, r18
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	8a 95       	dec	r24
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4aa:	cb 01       	movw	r24, r22
 4ac:	84 2b       	or	r24, r20
 4ae:	82 bb       	out	0x12, r24	; 18
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
 4b4:	41 11       	cpse	r20, r1
 4b6:	19 c0       	rjmp	.+50     	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
 4b8:	42 b3       	in	r20, 0x12	; 18
 4ba:	21 e0       	ldi	r18, 0x01	; 1
 4bc:	30 e0       	ldi	r19, 0x00	; 0
 4be:	b9 01       	movw	r22, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4c2:	66 0f       	add	r22, r22
 4c4:	77 1f       	adc	r23, r23
 4c6:	8a 95       	dec	r24
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4ca:	cb 01       	movw	r24, r22
 4cc:	80 95       	com	r24
 4ce:	84 23       	and	r24, r20
 4d0:	82 bb       	out	0x12, r24	; 18
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	08 95       	ret
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	08 95       	ret
 4de:	83 e0       	ldi	r24, 0x03	; 3
 4e0:	08 95       	ret
 4e2:	83 e0       	ldi	r24, 0x03	; 3
 4e4:	08 95       	ret
 4e6:	83 e0       	ldi	r24, 0x03	; 3
 4e8:	08 95       	ret
 4ea:	83 e0       	ldi	r24, 0x03	; 3
 4ec:	08 95       	ret

000004ee <DIO_toggle>:
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <DIO_toggle+0x6>
 4f2:	43 c0       	rjmp	.+134    	; 0x57a <DIO_toggle+0x8c>
 4f4:	62 34       	cpi	r22, 0x42	; 66
 4f6:	b9 f0       	breq	.+46     	; 0x526 <DIO_toggle+0x38>
 4f8:	18 f4       	brcc	.+6      	; 0x500 <DIO_toggle+0x12>
 4fa:	61 34       	cpi	r22, 0x41	; 65
 4fc:	31 f0       	breq	.+12     	; 0x50a <DIO_toggle+0x1c>
 4fe:	3f c0       	rjmp	.+126    	; 0x57e <DIO_toggle+0x90>
 500:	63 34       	cpi	r22, 0x43	; 67
 502:	f9 f0       	breq	.+62     	; 0x542 <DIO_toggle+0x54>
 504:	64 34       	cpi	r22, 0x44	; 68
 506:	59 f1       	breq	.+86     	; 0x55e <DIO_toggle+0x70>
 508:	3a c0       	rjmp	.+116    	; 0x57e <DIO_toggle+0x90>
 50a:	4b b3       	in	r20, 0x1b	; 27
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_toggle+0x2a>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_toggle+0x26>
 51c:	cb 01       	movw	r24, r22
 51e:	84 27       	eor	r24, r20
 520:	8b bb       	out	0x1b, r24	; 27
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	08 95       	ret
 526:	48 b3       	in	r20, 0x18	; 24
 528:	21 e0       	ldi	r18, 0x01	; 1
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	b9 01       	movw	r22, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_toggle+0x46>
 530:	66 0f       	add	r22, r22
 532:	77 1f       	adc	r23, r23
 534:	8a 95       	dec	r24
 536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_toggle+0x42>
 538:	cb 01       	movw	r24, r22
 53a:	84 27       	eor	r24, r20
 53c:	88 bb       	out	0x18, r24	; 24
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	08 95       	ret
 542:	45 b3       	in	r20, 0x15	; 21
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	b9 01       	movw	r22, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_toggle+0x62>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_toggle+0x5e>
 554:	cb 01       	movw	r24, r22
 556:	84 27       	eor	r24, r20
 558:	85 bb       	out	0x15, r24	; 21
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	08 95       	ret
 55e:	42 b3       	in	r20, 0x12	; 18
 560:	21 e0       	ldi	r18, 0x01	; 1
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	b9 01       	movw	r22, r18
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_toggle+0x7e>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	8a 95       	dec	r24
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_toggle+0x7a>
 570:	cb 01       	movw	r24, r22
 572:	84 27       	eor	r24, r20
 574:	82 bb       	out	0x12, r24	; 18
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	08 95       	ret
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	08 95       	ret
 57e:	82 e0       	ldi	r24, 0x02	; 2
 580:	08 95       	ret

00000582 <enable_external_INT0>:

void enable_external_INT0(void){
	
	PORTD |=(1<<2) ;
 582:	82 b3       	in	r24, 0x12	; 18
 584:	84 60       	ori	r24, 0x04	; 4
 586:	82 bb       	out	0x12, r24	; 18
	
	GICR = 1<<INT0;
 588:	80 e4       	ldi	r24, 0x40	; 64
 58a:	8b bf       	out	0x3b, r24	; 59
	
	MCUCR |= (1<<ISC01);
 58c:	85 b7       	in	r24, 0x35	; 53
 58e:	82 60       	ori	r24, 0x02	; 2
 590:	85 bf       	out	0x35, r24	; 53
	MCUCR |= (1<<ISC00);
 592:	85 b7       	in	r24, 0x35	; 53
 594:	81 60       	ori	r24, 0x01	; 1
 596:	85 bf       	out	0x35, r24	; 53
	sei();
 598:	78 94       	sei
 59a:	08 95       	ret

0000059c <INT0_FUNC_CALL>:
}
void INT0_FUNC_CALL(void (*callback)(void)){
	
	INT0_callback = callback;
 59c:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <INT0_callback+0x1>
 5a0:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <INT0_callback>
 5a4:	08 95       	ret

000005a6 <__vector_1>:
}

ISR (INT0_vect){
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
	
	INT0_callback();
 5c8:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <INT0_callback>
 5cc:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <INT0_callback+0x1>
 5d0:	09 95       	icall
}
 5d2:	ff 91       	pop	r31
 5d4:	ef 91       	pop	r30
 5d6:	bf 91       	pop	r27
 5d8:	af 91       	pop	r26
 5da:	9f 91       	pop	r25
 5dc:	8f 91       	pop	r24
 5de:	7f 91       	pop	r23
 5e0:	6f 91       	pop	r22
 5e2:	5f 91       	pop	r21
 5e4:	4f 91       	pop	r20
 5e6:	3f 91       	pop	r19
 5e8:	2f 91       	pop	r18
 5ea:	0f 90       	pop	r0
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <TIMER0_init>:

void static (*TIMER0_callback)(void);

void TIMER0_init(void){
	
	TCNT0 = 0;
 5f4:	12 be       	out	0x32, r1	; 50
	TIMSK = 0x01;
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	89 bf       	out	0x39, r24	; 57
	sei();
 5fa:	78 94       	sei
	
	TCCR0 = 0x05;
 5fc:	85 e0       	ldi	r24, 0x05	; 5
 5fe:	83 bf       	out	0x33, r24	; 51
 600:	08 95       	ret

00000602 <TIMER_FUNC_CALL>:
	
}
void TIMER_FUNC_CALL(void (*callback)(void)){

	TIMER0_callback = callback;
 602:	90 93 76 00 	sts	0x0076, r25	; 0x800076 <TIMER0_callback+0x1>
 606:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <TIMER0_callback>
 60a:	08 95       	ret

0000060c <__vector_11>:
}

ISR(TIMER0_OVF_vect)
{
 60c:	1f 92       	push	r1
 60e:	0f 92       	push	r0
 610:	0f b6       	in	r0, 0x3f	; 63
 612:	0f 92       	push	r0
 614:	11 24       	eor	r1, r1
 616:	2f 93       	push	r18
 618:	3f 93       	push	r19
 61a:	4f 93       	push	r20
 61c:	5f 93       	push	r21
 61e:	6f 93       	push	r22
 620:	7f 93       	push	r23
 622:	8f 93       	push	r24
 624:	9f 93       	push	r25
 626:	af 93       	push	r26
 628:	bf 93       	push	r27
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
	if (i == 16)
 62e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
 632:	80 31       	cpi	r24, 0x10	; 16
 634:	29 f4       	brne	.+10     	; 0x640 <__vector_11+0x34>
	{
		TIMER0_callback();
 636:	e0 91 75 00 	lds	r30, 0x0075	; 0x800075 <TIMER0_callback>
 63a:	f0 91 76 00 	lds	r31, 0x0076	; 0x800076 <TIMER0_callback+0x1>
 63e:	09 95       	icall
	}

	i %= 16;
 640:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <i>
 644:	8f 70       	andi	r24, 0x0F	; 15
	
	i++;
 646:	8f 5f       	subi	r24, 0xFF	; 255
 648:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <i>
}
 64c:	ff 91       	pop	r31
 64e:	ef 91       	pop	r30
 650:	bf 91       	pop	r27
 652:	af 91       	pop	r26
 654:	9f 91       	pop	r25
 656:	8f 91       	pop	r24
 658:	7f 91       	pop	r23
 65a:	6f 91       	pop	r22
 65c:	5f 91       	pop	r21
 65e:	4f 91       	pop	r20
 660:	3f 91       	pop	r19
 662:	2f 91       	pop	r18
 664:	0f 90       	pop	r0
 666:	0f be       	out	0x3f, r0	; 63
 668:	0f 90       	pop	r0
 66a:	1f 90       	pop	r1
 66c:	18 95       	reti

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
